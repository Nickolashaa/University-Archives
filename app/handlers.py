from aiogram import F, Bot, Dispatcher
from aiogram.enums import ChatAction
from aiogram.types import message, CallbackQuery, document
from aiogram.filters import CommandStart, Command
import app.keyboards as kb
from app.files.librarian import *
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile
from dotenv import load_dotenv
import os
from app.games.roll import rolling
from app.games.weird_game import SPERMA
load_dotenv()


start_text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ –∞—Ä—Ö–∏–≤—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!\n\n–£ –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥–∏—á–∫–∏, –±–∏–ª–µ—Ç—ã –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—Å–∞—Ç—å @nick331045"
help_text = "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ /arch\n\n–ë–æ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–µ–Ω, –Ω–µ –ø–æ–Ω–∏–º–∞—é, –∑–∞—á–µ–º –≤–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è???\n\n–î–ª—è —Å–≤—è–∑–∏ —Å –∞–≤—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ /nick"
rules_text = "1. –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n2. –î–æ–±–∞–≤–ª—è–π—Ç–µ –º–µ—Ç–æ–¥–∏—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .doc .docx .pdf\n3. –î–æ–±–∞–≤–ª—è—è –±–∏–ª–µ—Ç—ã,–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —Å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ + –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤ —Ñ–∞–π–ª–µ —Å –±–∏–ª–µ—Ç–∞–º–∏ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö"


bot = Bot(token=os.getenv('TOKEN_API'))
dp = Dispatcher()

last_subject = list()
last_chat_id = list()


def check(message_id):
    with open('app/files/stat.json', 'r') as f:
        stat = json.load(f)
        f.close()
    if message_id not in stat["id"]:
        stat["id"].append(message_id)
    stat["cnt"] += 1
    with open('app/files/stat.json', 'w') as f:
        json.dump(stat, f)
        f.close()


def admin(message):
    return message.chat.type == 'supergroup' and message.from_user.id == '841610537'


class NewSubjectBook(StatesGroup):
    subject = State()


class NewSubjectTickets(StatesGroup):
    subject = State()


class AddBook(StatesGroup):
    obj = State()


class AddTickets(StatesGroup):
    obj = State()


@dp.message(Command('arch'))
@dp.message(CommandStart())
async def cmd_start(message: message):
    last_chat_id.append(message.chat.id)
    check(message.chat.username)
    if len(last_chat_id) > 1000:
        last_chat_id.clear()
        last_chat_id.append(message.chat.id)
    await message.answer(start_text, reply_markup=kb.main)


@dp.callback_query(F.data == 'to_main')
async def callback_books(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(start_text, reply_markup=kb.main)


@dp.callback_query(F.data == 'books')
async def callback_books(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('üìö–ú–µ—Ç–æ–¥–∏—á–∫–∏üìö', reply_markup=kb.books_menu)


@dp.callback_query(F.data == 'tickets')
async def callback_books(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('üìÑ–ë–∏–ª–µ—Ç—ãüìÑ', reply_markup=kb.tickets_menu)


@dp.callback_query(F.data == 'search_book')
async def callback_books(callback: CallbackQuery):
    await callback.answer('')
    if len(get_book_subjects()) != 0:
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç...', reply_markup=await kb.subjects_menu_book_read())
    else:
        await callback.message.edit_text('–ù–∏ –æ–¥–Ω–æ–π –º–µ—Ç–æ–¥–∏—á–∫–∏ –Ω–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ :(', reply_markup=kb.to_main)


@dp.callback_query(F.data == 'search_tickets')
async def callback_books(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç...', reply_markup=await kb.subjects_menu_tickets_read())


@dp.callback_query(F.data == 'add_book')
async def callback_books(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç...', reply_markup=await kb.subjects_menu_book_write())


@dp.callback_query(F.data == 'add_tickets')
async def callback_books(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç...', reply_markup=await kb.subjects_menu_tickets_write())


@dp.callback_query(F.data.contains('read_book'))
async def callback_books(callback: CallbackQuery):
    await callback.answer('')
    await bot.send_chat_action(last_chat_id[-1], ChatAction.TYPING)
    await callback.message.delete()
    for subject in get_book_subjects():
        if subject in callback.data:
            if len(get_book_items(subject)) == 0:
                await callback.message.answer('–§–∞–π–ª–æ–≤ –Ω–µ—Ç :(', reply_markup=kb.to_main)
            else:
                for item in get_book_items(subject):
                    file = FSInputFile(f"app/files/books/{item}")
                    await callback.message.answer_document(file)
                await callback.message.answer(f'–í—Å–µ –º–µ—Ç–æ–¥–∏—á–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}‚úÖ', reply_markup=kb.to_main)


@dp.callback_query(F.data.contains('read_ticket'))
async def callback_books(callback: CallbackQuery):
    await callback.answer('')
    await bot.send_chat_action(last_chat_id[-1], ChatAction.TYPING)
    await callback.message.delete()
    for subject in get_tickets_subjects():
        if subject in callback.data:
            if len(get_tickets_items(subject)) == 0:
                await callback.message.answer('–§–∞–π–ª–æ–≤ –Ω–µ—Ç  :(', reply_markup=kb.to_main)
            else:
                for item in get_tickets_items(subject):
                    file = FSInputFile(f"app/files/tickets/{item}")
                    await callback.message.answer_document(file)
                await callback.message.answer(f'–í—Å–µ –±–∏–ª–µ—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}‚úÖ', reply_markup=kb.to_main)


@dp.callback_query(F.data == 'add_book_subject')
async def callback_books(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewSubjectBook.subject)
    await callback.answer('')
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã...')


@dp.message(NewSubjectBook.subject)
async def add_book_subject(message: message, state: FSMContext):
    await state.update_data(subject=message.text)
    data = await state.get_data()
    add_subject_book(data['subject'])
    await state.clear()
    await message.answer('‚úÖ–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ', reply_markup=kb.to_main)


@dp.callback_query(F.data == 'add_tickets_subject')
async def callback_books(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewSubjectTickets.subject)
    await callback.answer('')
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã...')


@dp.message(NewSubjectTickets.subject)
async def add_book_subject(message: message, state: FSMContext):
    await state.update_data(subject=message.text)
    data = await state.get_data()
    add_subject_tickets(data['subject'])
    await state.clear()
    await message.answer('‚úÖ–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ', reply_markup=kb.to_main)


@dp.callback_query(F.data.contains('write_book'))
async def callback_add_book(callback: CallbackQuery, state: FSMContext):
    for subject in get_book_subjects():
        if subject in callback.data:
            last_subject.append(subject)
            break
    await state.set_state(AddBook.obj)
    await callback.answer('')
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥–∏—á–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ doc, docx, pdf...')


@dp.message(AddBook.obj)
async def callback_add_book_3(message: document, state: FSMContext):
    await state.update_data(obj=message)
    add_book(last_subject[-1], message.document.file_name)
    last_subject.clear()
    document = message.document
    file_id = document.file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    downloaded_file = await bot.download_file(file_path)
    file_name = document.file_name
    with open(f'app/files/books/{file_name}', 'wb') as new_file:
        new_file.write(downloaded_file.read())
        new_file.close()
    await message.answer('üìö‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', reply_markup=kb.to_main)
    await state.clear()


@dp.callback_query(F.data.contains('write_ticket'))
async def callback_add_book(callback: CallbackQuery, state: FSMContext):
    for subject in get_tickets_subjects():
        if subject in callback.data:
            last_subject.append(subject)
            break
    await state.set_state(AddTickets.obj)
    await callback.answer('')
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ë–∏–ª–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ doc, docx, pdf, –Ω–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤ + –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤ —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö...')


@dp.message(AddTickets.obj)
async def callback_add_book_3(message: document, state: FSMContext):
    await state.update_data(obj=message)
    add_tickets(last_subject[-1], message.document.file_name)
    last_subject.clear()
    document = message.document
    file_id = document.file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    downloaded_file = await bot.download_file(file_path)
    file_name = document.file_name
    with open(f'app/files/tickets/{file_name}', 'wb') as new_file:
        new_file.write(downloaded_file.read())
        new_file.close()
    await message.answer('üìÑ‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', reply_markup=kb.to_main)
    await state.clear()


@dp.message(Command('help'))
async def callback_add_book_3(message: message):
    await message.answer(help_text, reply_markup=kb.to_main)
    last_chat_id.append(message.chat.id)
    if len(last_chat_id) > 1000:
        last_chat_id.clear()
        last_chat_id.append(message.chat.id)


@dp.message(Command('rules'))
async def callback_add_book_3(message: message):
    await message.answer(rules_text, reply_markup=kb.to_main)
    last_chat_id.append(message.chat.id)
    if len(last_chat_id) > 1000:
        last_chat_id.clear()
        last_chat_id.append(message.chat.id)


@dp.message(Command('nick'))
async def callback_add_book_3(message: message):
    await message.answer("–ê–≤—Ç–æ—Ä –±–æ—Ç–∞: @nick331045", reply_markup=kb.to_main)
    last_chat_id.append(message.chat.id)
    if len(last_chat_id) > 1000:
        last_chat_id.clear()
        last_chat_id.append(message.chat.id)


@dp.message(F.text == "–ë–æ—Ç.–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def callback_add_book_3(message: message):
    with open('app/files/stat.json', 'r') as f:
        stat = json.load(f)
        f.close()
    cnt = stat["cnt"]
    await message.answer(f"–í—Å–µ–≥–æ –±–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å {cnt} —Ä–∞–∑")


@dp.message(F.text == "–ë–æ—Ç.–°–ø–∏—Å–æ–∫")
async def callback_add_book_3(message: message):
    with open('app/files/stat.json', 'r') as f:
        stat = json.load(f)
        f.close()
    await message.answer("–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º")
    for item in stat["id"]:
        await message.answer(f"@{item}")


@dp.message(Command('game_words'))
async def game_words(message:message):
    if admin(message):
        await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –≤ —Å–ª–æ–≤–∞\n–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ\n–ü–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è —Å–ª–æ–≤–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã")


@dp.message(Command('roll'))
async def test(message:message):
    res = rolling(message.from_user.first_name)
    if res == 0:
        await message.reply(f"–£–≤—ã, {message.from_user.first_name}, –æ—Ç–Ω—ã–Ω–µ —Ç—ã –∂–µ—Ä—Ç–≤–∞ –ù–æ—Å–æ–≤–∏—Ü–∫–æ–≥–æ")
    else:
        await message.reply(f"–ü–æ–≤–µ–∑–ª–æ, {message.from_user.first_name} –Ω–µ —Å—Ç–∞–ª –ø–æ–ø—É—Å–∫–æ–º {res} —Ä–∞–∑")


@dp.message(Command('SPERMA'))
async def test(message:message):
    res = SPERMA(message.from_user.first_name)
    await message.reply(f"{message.from_user.first_name} —Å–≤–µ—Ä–∫–Ω—É–ª —É–º–æ–º {res} —Ä–∞–∑")